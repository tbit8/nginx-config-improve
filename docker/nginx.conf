# Define user
user www-data;
# Increase from default
worker_processes  4;

### Why limit nginx. lets us improve vars for performance
worker_rlimit_nofile 40960;

events {
# lets also improve from default 1024
	worker_connections  4096;
}

http {

# Lets implement an upstream for better flexibility and visibility

upstream fastcgi_backend {
	server 127.0.0.1:9000;
# keep the below open connections at any given time so no need for extra handshakes
	keepalive 32;
}

    

# Let us customise the logs - especially the actual IP
   
log_format  main  '$http_x_forwarded_for - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"$host" sn="$server_name" '
                        'rt=$request_time '
                        'ua="$upstream_addr" us="$upstream_status" '
                        'ut="$upstream_response_time" ul="$upstream_response_length" '
                        'cs=$upstream_cache_status cl="$content_length" $request_id ';

	
	
    include       mime.types;
    sendfile        on;
# faster tcp
	tcp_nopush          on;
# faster tcp
    tcp_nodelay         on;
    keepalive_timeout  65;
    default_type application/octet-stream;
    server_tokens off;
# allow more concurrent users on nginx
	types_hash_max_size 2048;
# lets also handle long domain names because you never know
	server_names_hash_bucket_size  128;
    
# using gunzip... if it doesnt work remove the whole block
	gzip on;
	gzip_disable "msie6";

	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    
# lets start defining the server block now
server {
        listen 80;
        server_name ~.*;
        root /app;
        index index.php;
        charset utf-8;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
		add_header              X-Upstream                      $upstream_addr;
        
        location / {
            try_files $uri $uri/ /index.php?$query_string;
			
proxy_set_header        HTTP_X_FORWARDED_FOR                 $proxy_add_x_forwarded_for;
proxy_set_header        X-Forwarded-For                 $proxy_add_x_forwarded_for;
proxy_set_header        X-Forwarded-Host                $host;
proxy_set_header        X-Forwarded-Server              $host;
proxy_set_header        Upgrade                                 $http_upgrade;
proxy_set_header        Connection                              "upgrade";

proxy_http_version      1.1;

#Adding headers to response

        }

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }
# assign the new log format to the access log
	access_log /dev/stdout main;
        error_log /dev/stderr notice;
        sendfile off;
        client_max_body_size 100m;

# we need to point php files to the created upstream
        location ~ \.php$ {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass fastcgi_backend;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_intercept_errors off;
# this is required for the previous keepalive connections to work well
	    fastcgi_keep_conn on;
            fastcgi_buffering off; 
        }
		
# nginx statistics.. imp to monitor
		
	location /nginx_status {
	        # Turn on stats
        	stub_status on;
        	access_log   off;
        	# change the below to only allow access from internal
        allow all;
# deny xxxx (if needed)        
   }
		
location /nginx_conn_active { 

    return 200 [$connections_active];
}
location /nginx_conn_waiting {

	return 200 [$connections_waiting];
}
location /nginx_conn_reading {
	return 200 [$connections_reading];
}

location /nginx_conn_writing {
	return 200 [$connections_writing];
}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }
    #include /etc/nginx/sites-enabled/*;
}

daemon off;
